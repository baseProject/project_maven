<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="alias" value="${jdbc.alias}"/>
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl">
			<value>${jdbc.driverUrl}</value>
		</property>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="testBeforeUse" value="true"/>
		<property name="testAfterUse" value="true"/>
		<!-- 是指在任一时刻，可以（同时）建立的最大连接数，也就是说，就是已经请求的、但还没可用的新连接数量 -->
		<property name="simultaneousBuildThrottle" value="${jdbc.simultaneousBuildThrottle}"/>
		<!--最大连接数(默认5个),超过了这个连接数,再有请求时,就排在队列中等候,最大的等待请求数由maximum-new-connections决定 -->
		<property name="maximumConnectionCount" value="${jdbc.maximumConnectionCount}"/>
		<!--最小连接数(默认2个) -->
		<property name="minimumConnectionCount" value="${jdbc.minimumConnectionCount}"/>
		<!--最少保持的空闲连接数(默认2个) -->
		<property name="prototypeCount" value="${jdbc.prototypeCount}"/>
		<!--用于保持连接的测试语句 -->
		<property name="houseKeepingTestSql">
			<value>${jdbc.houseKeepingTestSql}</value>
		</property>
		<property name="maximumActiveTime" value="172800000" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/META-INF/config/mybatis.cfg.xml" />
		<property name="mapperLocations">
			<list>
			<!--  
				<value>classpath:com/zhangjiaolong/frame/mapper/MySQLMapper.xml</value>
				<value>classpath:com/zhangjiaolong/auth/mapper/UserMapper.xml</value>
				<value>classpath:com/zhangjiaolong/auth/mapper/RoleMapper.xml</value>
				<value>classpath:com/zhangjiaolong/auth/mapper/ResourceMapper.xml</value>
			-->
			<value>classpath:com/zhangjiaolong/*/mapper/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- 配置Mybatis模版 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 通过AOP定义的事务增强切面 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="tracationMethods"
			expression="execution(public * com.suntomor.newsbroke.*.service.impl.*ServiceImpl.*(..))" />
		<aop:advisor pointcut-ref="tracationMethods" advice-ref="txAdvice" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="com.suntomor.newsbroke.frame.exception.DBAccessException, java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

</beans>
